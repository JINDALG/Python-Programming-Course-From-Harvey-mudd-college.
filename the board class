# -*- coding: cp1252 -*-
# python 2
#
# Homework 10, Problem 2
# Name:
#

class Board:
    """ a datatype representing a C4 board
        with an arbitrary number of rows and cols
    """
    
    def __init__( self, width, height ):
        """ the constructor for objects of type Board """
        self.width = width
        self.height = height
        W = self.width
        H = self.height
        self.data = [ [' ']*W for row in range(H) ]

        # we do not need to return inside a constructor!
        

    def __repr__(self):
        """ this method returns a string representation
            for an object of type Board
        """
        H = self.height
        W = self.width
        s = ''   # the string to return
        for row in range(H):
            s += '|'   
            for col in range(W):
                s += self.data[row][col]+'|'
            s += '\n'

        s += (2*W+1) * '-'    # bottom of the board
        
        # and the numbers underneath here
        
        return s       # the board is complete, return it

    def addMove(self, col, ox):
        if col in range(self.width):
            for x in range(self.height):
                if self.data[x][col]==' ':
                    self.data[x][col]=ox
                    return

    def clear( self ):
        for i in range(self.height):
            for j in range(self.width):
                self.data[i][j]=' '

    def setBoard( self, moveString ):
        """ takes in a string of columns and places
            alternating checkers in those columns,
            starting with 'X'
            
            For example, call b.setBoard('012345')
            to see 'X's and 'O's alternate on the
            bottom row, or b.setBoard('000000') to
            see them alternate in the left column.

            moveString must be a string of integers
        """
        nextCh = 'X'   # start by playing 'X'
        for colString in moveString:
            col = int(colString)
            if 0 <= col <= self.width:
                self.addMove(col, nextCh)
            if nextCh == 'X':
                nextCh = 'O'
            else:
                nextCh = 'X'

    def allowsMove(self, c):
        if c in range(self.width):
            for x in range(self.height):
                if self.data[x][c]==' ':
                    return True
            return False
        else :
            return False

    def isFull(self):
        for i in range(self.height):
            for j in range(self.width):
                if self.data[i][j]==' ':
                    return False
        return True


    def delMove(self, col):
        for x in range(self.height):
            if self.data[x][col] != ' ':
                self.data[x][col]=' '
                return

    def winsFor(self, ox):
        for i in range(self.height):
            for j in range(self.width-3):
                if self.data[i][j]==ox and self.data[i][j+1]==ox and self.data[i][j+2]==ox and self.data[i][j+3]==ox:
                    return True 
        for i in range(self.height-3):
            for j in range(self.width):
                if self.data[i][j]==ox and self.data[i+1][j]==ox and self.data[i+2][j]==ox and self.data[i+3][j]==ox:
                    return True
        for i in range(self.height-3):
            for j in range(self.width-3):
                if self.data[i][j]==ox and self.data[i+1][j+1]==ox and self.data[i+2][j+2]==ox and self.data[i+3][j+3]==ox:
                    return True
        i=self.height-1
        j=self.width-1
        while i>2:
            while j>2:
                if self.data[i][j]==ox and self.data[i-1][j-1]==ox and self.data[i-2][j-2]==ox and self.data[i-3][j-3]==ox:
                    return True
                j-=1
            i-=1
        return False

    def hostGame(self):
        next_char = 'X'
        number=0
        print 'Welcome to Connect Four!'
        print
        while True:
            loop = True
            print self
            user = input( next_char+'\'s choice :')
            number+=1
            while loop:
                if self.allowsMove(user):
                    self.addMove(user,next_char)
                    loop = False
                else :
                    user = input( next_char+'\'s choice :')
            if self.winsFor(next_char):
                print next_char+' wins Congratulations!'
                print self
                break
            elif number == self.width*self.height:
                print 'Match is tie'
                print self
                break
            if next_char == 'X':
                next_char = 'O'
            else:
                next_char = 'X'

